{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "optimization.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/baeksumin/k-project/blob/main/data_preprocessing/optimization.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AwRgIzP5NoiZ",
        "outputId": "c275ee60-52c3-4360-8852-7002236250d2"
      },
      "source": [
        "!pip install backtrader"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting backtrader\n",
            "  Downloading backtrader-1.9.76.123-py2.py3-none-any.whl (410 kB)\n",
            "\u001b[?25l\r\u001b[K     |▉                               | 10 kB 21.3 MB/s eta 0:00:01\r\u001b[K     |█▋                              | 20 kB 9.1 MB/s eta 0:00:01\r\u001b[K     |██▍                             | 30 kB 6.3 MB/s eta 0:00:01\r\u001b[K     |███▏                            | 40 kB 6.0 MB/s eta 0:00:01\r\u001b[K     |████                            | 51 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████▉                           | 61 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████▋                          | 71 kB 5.5 MB/s eta 0:00:01\r\u001b[K     |██████▍                         | 81 kB 6.2 MB/s eta 0:00:01\r\u001b[K     |███████▏                        | 92 kB 5.5 MB/s eta 0:00:01\r\u001b[K     |████████                        | 102 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████▉                       | 112 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |█████████▋                      | 122 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |██████████▍                     | 133 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |███████████▏                    | 143 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████                    | 153 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████▉                   | 163 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |█████████████▋                  | 174 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |██████████████▍                 | 184 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |███████████████▏                | 194 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████████                | 204 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████████▉               | 215 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████▋              | 225 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████▍             | 235 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████▏            | 245 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████            | 256 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████▊           | 266 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▋          | 276 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▍         | 286 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▏        | 296 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████        | 307 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▊       | 317 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▋      | 327 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▍     | 337 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▏    | 348 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████    | 358 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▊   | 368 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▋  | 378 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▍ | 389 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▏| 399 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 409 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 410 kB 5.1 MB/s \n",
            "\u001b[?25hInstalling collected packages: backtrader\n",
            "Successfully installed backtrader-1.9.76.123\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DJTXPc3Alj65",
        "outputId": "91a6f97c-55d5-4c11-ebad-483da1fe58c5"
      },
      "source": [
        "!pip install backtesting"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting backtesting\n",
            "  Downloading Backtesting-0.3.3.tar.gz (175 kB)\n",
            "\u001b[?25l\r\u001b[K     |█▉                              | 10 kB 9.8 MB/s eta 0:00:01\r\u001b[K     |███▊                            | 20 kB 14.5 MB/s eta 0:00:01\r\u001b[K     |█████▋                          | 30 kB 15.4 MB/s eta 0:00:01\r\u001b[K     |███████▌                        | 40 kB 10.8 MB/s eta 0:00:01\r\u001b[K     |█████████▍                      | 51 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████▏                    | 61 kB 5.5 MB/s eta 0:00:01\r\u001b[K     |█████████████                   | 71 kB 5.9 MB/s eta 0:00:01\r\u001b[K     |███████████████                 | 81 kB 6.6 MB/s eta 0:00:01\r\u001b[K     |████████████████▉               | 92 kB 7.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████▊             | 102 kB 5.4 MB/s eta 0:00:01\r\u001b[K     |████████████████████▌           | 112 kB 5.4 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▍         | 122 kB 5.4 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▎       | 133 kB 5.4 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▏     | 143 kB 5.4 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████    | 153 kB 5.4 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▉  | 163 kB 5.4 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▊| 174 kB 5.4 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 175 kB 5.4 MB/s \n",
            "\u001b[?25hRequirement already satisfied: numpy>=1.17.0 in /usr/local/lib/python3.7/dist-packages (from backtesting) (1.19.5)\n",
            "Requirement already satisfied: pandas!=0.25.0,>=0.25.0 in /usr/local/lib/python3.7/dist-packages (from backtesting) (1.1.5)\n",
            "Requirement already satisfied: bokeh>=1.4.0 in /usr/local/lib/python3.7/dist-packages (from backtesting) (2.3.3)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4 in /usr/local/lib/python3.7/dist-packages (from bokeh>=1.4.0->backtesting) (3.10.0.2)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from bokeh>=1.4.0->backtesting) (2.8.2)\n",
            "Requirement already satisfied: packaging>=16.8 in /usr/local/lib/python3.7/dist-packages (from bokeh>=1.4.0->backtesting) (21.3)\n",
            "Requirement already satisfied: PyYAML>=3.10 in /usr/local/lib/python3.7/dist-packages (from bokeh>=1.4.0->backtesting) (3.13)\n",
            "Requirement already satisfied: Jinja2>=2.9 in /usr/local/lib/python3.7/dist-packages (from bokeh>=1.4.0->backtesting) (2.11.3)\n",
            "Requirement already satisfied: tornado>=5.1 in /usr/local/lib/python3.7/dist-packages (from bokeh>=1.4.0->backtesting) (5.1.1)\n",
            "Requirement already satisfied: pillow>=7.1.0 in /usr/local/lib/python3.7/dist-packages (from bokeh>=1.4.0->backtesting) (7.1.2)\n",
            "Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from Jinja2>=2.9->bokeh>=1.4.0->backtesting) (2.0.1)\n",
            "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=16.8->bokeh>=1.4.0->backtesting) (3.0.6)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas!=0.25.0,>=0.25.0->backtesting) (2018.9)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->bokeh>=1.4.0->backtesting) (1.15.0)\n",
            "Building wheels for collected packages: backtesting\n",
            "  Building wheel for backtesting (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for backtesting: filename=Backtesting-0.3.3-py3-none-any.whl size=173823 sha256=c595d185e46055af48853b12f220198302d1445ad938402b1dd9eacc30aee0de\n",
            "  Stored in directory: /root/.cache/pip/wheels/48/1d/ea/65dacebc37da7655d8a1fd0f315ac39d102e31d6545237a1c6\n",
            "Successfully built backtesting\n",
            "Installing collected packages: backtesting\n",
            "Successfully installed backtesting-0.3.3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GKsaERNSJ2ey",
        "outputId": "578f5d76-3432-4ff1-ac13-29c62dd5313b"
      },
      "source": [
        "!pip install deap"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting deap\n",
            "  Downloading deap-1.3.1-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (160 kB)\n",
            "\u001b[?25l\r\u001b[K     |██                              | 10 kB 22.9 MB/s eta 0:00:01\r\u001b[K     |████                            | 20 kB 30.2 MB/s eta 0:00:01\r\u001b[K     |██████                          | 30 kB 15.0 MB/s eta 0:00:01\r\u001b[K     |████████▏                       | 40 kB 10.6 MB/s eta 0:00:01\r\u001b[K     |██████████▏                     | 51 kB 5.7 MB/s eta 0:00:01\r\u001b[K     |████████████▏                   | 61 kB 6.2 MB/s eta 0:00:01\r\u001b[K     |██████████████▎                 | 71 kB 6.0 MB/s eta 0:00:01\r\u001b[K     |████████████████▎               | 81 kB 6.7 MB/s eta 0:00:01\r\u001b[K     |██████████████████▎             | 92 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████▍           | 102 kB 5.4 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▍         | 112 kB 5.4 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▍       | 122 kB 5.4 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▌     | 133 kB 5.4 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▌   | 143 kB 5.4 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▌ | 153 kB 5.4 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 160 kB 5.4 MB/s \n",
            "\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from deap) (1.19.5)\n",
            "Installing collected packages: deap\n",
            "Successfully installed deap-1.3.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#talib 설치\n",
        "!wget -q http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz 2>&1 > /dev/null\n",
        "!tar xvzf ta-lib-0.4.0-src.tar.gz 2>&1 > /dev/null\n",
        "\n",
        "import os\n",
        "\n",
        "os.chdir('ta-lib')  \n",
        "\n",
        "!./configure --prefix=/usr 2>&1 > /dev/null\n",
        "!make 2>&1 > /dev/null\n",
        "!make install 2>&1 > /dev/null\n",
        "\n",
        "os.chdir('../')\n",
        "\n",
        "!pip install TA-Lib 2>&1 > /dev/null"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h99VB0_fydhG",
        "outputId": "0dc1d7aa-be6d-4d58-e2cb-87c52f9b400a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "./configure: line 4354: /usr/bin/file: No such file or directory\n",
            "libtool: link: warning: `-version-info/-version-number' is ignored for convenience libraries\n",
            "ar: `u' modifier ignored since `D' is the default (see `U')\n",
            "libtool: link: warning: `-version-info/-version-number' is ignored for convenience libraries\n",
            "ar: `u' modifier ignored since `D' is the default (see `U')\n",
            "libtool: link: warning: `-version-info/-version-number' is ignored for convenience libraries\n",
            "ar: `u' modifier ignored since `D' is the default (see `U')\n",
            "libtool: link: warning: `-version-info/-version-number' is ignored for convenience libraries\n",
            "ar: `u' modifier ignored since `D' is the default (see `U')\n",
            "ar: `u' modifier ignored since `D' is the default (see `U')\n",
            "\u001b[01m\u001b[Kgen_code.c:\u001b[m\u001b[K In function ‘\u001b[01m\u001b[KprintFuncHeaderDoc\u001b[m\u001b[K’:\n",
            "\u001b[01m\u001b[Kgen_code.c:3456:4:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[Kformat not a string literal and no format arguments [\u001b[01;35m\u001b[K-Wformat-security\u001b[m\u001b[K]\n",
            "    \u001b[01;35m\u001b[Kfprintf\u001b[m\u001b[K( out, prefix );\n",
            "    \u001b[01;35m\u001b[K^~~~~~~\u001b[m\u001b[K\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hLPspbq2E05H",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f03d6636-28ef-46e8-ab04-730dde52c10e"
      },
      "source": [
        "import re\n",
        "import sys\n",
        "import json\n",
        "import time\n",
        "import talib\n",
        "import pickle\n",
        "import random\n",
        "import logging\n",
        "import os.path\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "from tqdm import trange\n",
        "import backtrader as bt\n",
        "from google.colab import drive\n",
        "import matplotlib.pyplot as plt\n",
        "from backtesting import Strategy\n",
        "from backtesting import Backtest\n",
        "import backtrader.feeds as btfeeds\n",
        "from IPython.display import display, Image\n",
        "from datetime import datetime, date, timedelta\n",
        "from deap import base, creator, tools, algorithms\n",
        "\n",
        "pd.options.mode.chained_assignment = None  # default='warn'"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/backtesting/_plotting.py:50: UserWarning: Jupyter Notebook detected. Setting Bokeh output to notebook. This may not work in Jupyter clients without JavaScript support (e.g. PyCharm, Spyder IDE). Reset with `backtesting.set_bokeh_output(notebook=False)`.\n",
            "  warnings.warn('Jupyter Notebook detected. '\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "swbgtar7FN54",
        "outputId": "7131c720-dfae-44a5-9199-cd69ee81f580"
      },
      "source": [
        "drive.mount('/content/drive')\n",
        "data_path = '/content/drive/MyDrive/[Shared]K-Project/data/'"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i_uIi9Dp256N",
        "outputId": "1ba655fc-d033-4b11-92de-298ad2976edf"
      },
      "source": [
        "## Load pickle - fullcode 목록\n",
        "with open(data_path + 'full_code.pkl',\"rb\") as f: \n",
        "    fullcode = pickle.load(f)\n",
        "    \n",
        "# 상장폐지 상태 제외시키기\n",
        "fullcode_filter = fullcode[fullcode['status'] != '상장폐지']\n",
        "\n",
        "# fullcode열을 list로 변경\n",
        "fullcode_list = list(fullcode_filter['full_code'])\n",
        "fullcode_list0 = fullcode_list[:1]\n",
        "# fullcode_list0 = fullcode_list[260:520]\n",
        "# fullcode_list0 = fullcode_list[520:780]\n",
        "# fullcode_list0 = fullcode_list[780:1040]\n",
        "# fullcode_list0 = fullcode_list[1040:1300]\n",
        "# fullcode_list0 = fullcode_list[1300:1560]\n",
        "# fullcode_list0 = fullcode_list[1560:1820]\n",
        "# fullcode_list0 = fullcode_list[1820:2080]\n",
        "# fullcode_list0 = fullcode_list[2080:2340]\n",
        "# fullcode_list0 = fullcode_list[2340:]\n",
        "print(len(fullcode_list0))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QstDkFwz0K8O"
      },
      "source": [
        "with open(data_path + 'initial_data1.json',\"r\") as json_file:\n",
        "    json_data = json.load(json_file) "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 전략\n",
        "\n",
        "class SmaCross1(bt.Strategy):\n",
        "  params = dict(\n",
        "    pfast=50, # period for the fast moving average\n",
        "    pslow=200 # period for the slow moving average \n",
        "    ) \n",
        "  \n",
        "  def __init__(self):\n",
        "    sma1 = bt.ind.SMA(period = self.p.pfast) # fast moving average \n",
        "    sma2 = bt.ind.SMA(period = self.p.pslow) # slow moving average \n",
        "    self.crossover = bt.ind.CrossOver(sma1, sma2) # crossover signal \n",
        "\n",
        "  def next(self): \n",
        "    if not self.position: # not in the market \n",
        "      if self.crossover > 0: # if fast crosses slow to the upside \n",
        "        close = self.data.close[0] # 종가 값 \n",
        "          \n",
        "        size = int(self.broker.getcash() / close) # 최대 구매 가능 개수 \n",
        "        self.buy(size=size) # 매수 size = 구매 개수 설정 \n",
        "    elif self.crossover < 0: # in the market & cross to the downside \n",
        "        self.close() # 매도\n",
        "\n",
        "class RSI(bt.Strategy):\n",
        "  params = dict(period=26)\n",
        "\n",
        "  def __init__(self):\n",
        "    self.rsi = bt.indicators.RSI(self.data.close, period=self.p.period)\n",
        "\n",
        "  def next(self):    \n",
        "    if not self.position:  #아직 주식을 사지 않았다면\n",
        "\n",
        "      if self.rsi <30 :\n",
        "        self.order = self.buy()\n",
        "\n",
        "    elif self. rsi >70 :\n",
        "      self.order = self.sell()\n",
        "\n",
        "class ROC(bt.Strategy):\n",
        "  params = dict(period=14)\n",
        "\n",
        "  def __init__(self):\n",
        "    self.roc = bt.indicators.ROC(self.data.close, period=self.p.period)\n",
        "\n",
        "  def next(self):    \n",
        "    if not self.position:  #아직 주식을 사지 않았다면\n",
        "\n",
        "      if self.roc > 0:\n",
        "        self.order = self.buy()\n",
        "\n",
        "    elif self.roc < 0:\n",
        "      self.order = self.sell()\n",
        "\n",
        "class EmaCross(bt.Strategy):\n",
        "    params = dict(\n",
        "        period_1=12,\n",
        "        period_2=26,\n",
        "        period_signal=9\n",
        "    )\n",
        "    \n",
        "    ## 초기화 메서드\n",
        "    def __init__(self):\n",
        "        ema1 = bt.ind.EMA(self.data, period=self.p.period_1) # 단기 이동 평균선\n",
        "        ema2 = bt.ind.EMA(self.data, period=self.p.period_2) # 장기 이동 평균선\n",
        "        self.crossover = bt.ind.CrossOver(ema1, ema2)\n",
        "        \n",
        "    def next(self):\n",
        "        if not self.position:\n",
        "            if self.crossover > 0:  # 단기 이동 평균선이 장기 이동 평균선을 상향 돌파시 매수\n",
        "                self.buy()\n",
        "                \n",
        "        elif self.crossover < 0:  # 단기 이동 평균선이 장기 이동 평균선을 하향 돌파시 매수\n",
        "            self.close()\n",
        "\n",
        "class StochasticSR(bt.Strategy):\n",
        "    '''Trading strategy that utilizes the Stochastic Oscillator indicator for oversold/overbought entry points, \n",
        "    and previous support/resistance via Donchian Channels as well as a max loss in pips for risk levels.'''\n",
        "    # parameters for Stochastic Oscillator and max loss in pips\n",
        "    # Donchian Channels to determine previous support/resistance levels will use the given period as well\n",
        "    # http://www.ta-guru.com/Book/TechnicalAnalysis/TechnicalIndicators/Stochastic.php5 for Stochastic Oscillator formula and description\n",
        "    params = (('period', 14), ('pfast', 3), ('pslow', 3), ('upperLimit', 80), ('lowerLimit', 20), ('stop_pips', .002))\n",
        "\n",
        "    def __init__(self):\n",
        "        '''Initializes logger and variables required for the strategy implementation.'''\n",
        "        # initialize logger for log function (set to critical to prevent any unwanted autologs, not using log objects because only care about logging one thing)\n",
        "        for handler in logging.root.handlers[:]:\n",
        "            logging.root.removeHandler(handler)\n",
        "\n",
        "        logging.basicConfig(format='%(message)s', level=logging.CRITICAL, handlers=[\n",
        "            logging.FileHandler(\"LOG.log\"),\n",
        "            logging.StreamHandler()\n",
        "            ])\n",
        "\n",
        "        self.order = None\n",
        "        self.donchian_stop_price = None\n",
        "        self.price = None\n",
        "        self.stop_price = None\n",
        "        self.stop_donchian = None\n",
        "\n",
        "        self.stochastic = bt.indicators.Stochastic(self.data, period=self.params.period, period_dfast=self.params.pfast, period_dslow=self.params.pslow, \n",
        "        upperband=self.params.upperLimit, lowerband=self.params.lowerLimit)\n",
        "\n",
        "\n",
        "    def next(self):\n",
        "        '''Checks to see if Stochastic Oscillator, position, and order conditions meet the entry or exit conditions for the execution of buy and sell orders.'''\n",
        "        if self.order:\n",
        "            # if there is a pending order, don't do anything\n",
        "            return\n",
        "        if self.position.size == 0:\n",
        "            # When stochastic crosses back below 80, enter short position.\n",
        "            if self.stochastic.lines.percD[-1] >= 80 and self.stochastic.lines.percD[0] <= 80:\n",
        "                # stop price at last support level in self.params.period periods\n",
        "                self.donchian_stop_price = max(self.data.high.get(size=self.params.period))\n",
        "                self.order = self.sell()\n",
        "                # stop loss order for max loss of self.params.stop_pips pips\n",
        "                self.stop_price = self.buy(exectype=bt.Order.Stop, price=self.data.close[0]+self.params.stop_pips, oco=self.stop_donchian)\n",
        "                # stop loss order for donchian SR price level\n",
        "                self.stop_donchian = self.buy(exectype=bt.Order.Stop, price=self.donchian_stop_price, oco=self.stop_price)\n",
        "            # when stochastic crosses back above 20, enter long position.\n",
        "            elif self.stochastic.lines.percD[-1] <= 20 and self.stochastic.lines.percD[0] >= 20:\n",
        "                # stop price at last resistance level in self.params.period periods\n",
        "                self.donchian_stop_price = min(self.data.low.get(size=self.params.period))\n",
        "                self.order = self.buy()\n",
        "                # stop loss order for max loss of self.params.stop_pips pips\n",
        "                self.stop_price = self.sell(exectype=bt.Order.Stop, price=self.data.close[0]-self.params.stop_pips, oco=self.stop_donchian)\n",
        "                # stop loss order for donchian SR price level\n",
        "                self.stop_donchian = self.sell(exectype=bt.Order.Stop, price=self.donchian_stop_price, oco=self.stop_price) \n",
        "  \n",
        "        if self.position.size > 0:\n",
        "            # When stochastic is above 70, close out of long position\n",
        "            if (self.stochastic.lines.percD[0] >= 70):\n",
        "                self.close(oco=self.stop_price)\n",
        "        if self.position.size < 0:\n",
        "            # When stochastic is below 30, close out of short position\n",
        "            if (self.stochastic.lines.percD[0] <= 30):\n",
        "                self.close(oco=self.stop_price)"
      ],
      "metadata": {
        "id": "SehDcY_5orDS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ogL3SqyM2BEP",
        "outputId": "78cbc77c-0e54-480c-b90e-416947a7fce5"
      },
      "source": [
        "result_dict = {}\n",
        "\n",
        "for j in range(len(fullcode_list0)): \n",
        "\n",
        "  print(j)\n",
        "  print(fullcode_list0[j])\n",
        "  \n",
        "  # backtest 데이터 가공\n",
        "\n",
        "  df = pd.read_json(json_data[fullcode_list0[j]], orient ='index') # 첫번째 키값으로 데이터프레임 변환\n",
        "  df = df.transpose()\n",
        "\n",
        "  #시간순 재정렬\n",
        "  df = df.sort_values(by=['TRD_DD'])\n",
        "  df.reset_index(drop=True,inplace=True)\n",
        "  df['TRD_DD'] = pd.to_datetime(df['TRD_DD']) #datetime변환\n",
        "\n",
        "  #인풋 데이터 모양 맞춰주기(backtest에 들어갈 데이터 모양)\n",
        "  df_bt = df[['TRD_DD','TDD_OPNPRC','TDD_HGPRC','TDD_LWPRC','TDD_CLSPRC', 'ACC_TRDVOL']]\n",
        "  df_bt['TRD_DD'] = pd.to_datetime(df_bt['TRD_DD'])\n",
        "  df_bt.rename(columns={'TRD_DD':'Date', 'TDD_OPNPRC':'Open', 'TDD_HGPRC':'High','TDD_LWPRC':'Low','TDD_CLSPRC':'Close', 'ACC_TRDVOL':'Volume'}, inplace=True)\n",
        "  df_bt.set_index('Date',drop=True,inplace=True)\n",
        "\n",
        "  #데이터프레임 콤마(,) 제거 그리고 타입 소수로 변환\n",
        "  df_bt['Open'] = df_bt['Open'].str.replace(',','').astype('float')\n",
        "  df_bt['High'] = df_bt['High'].str.replace(',','').astype('float')\n",
        "  df_bt['Low'] = df_bt['Low'].str.replace(',','').astype('float')\n",
        "  df_bt['Close'] = df_bt['Close'].str.replace(',','').astype('float')\n",
        "  df_bt['Volume'] = df_bt['Volume'].str.replace(',','').astype('float')\n",
        "\n",
        "\n",
        "# GDC --------------------------------------------------------------------------\n",
        "  random.seed(3)\n",
        "\n",
        "  PARAM_NAMES = [\"pfast\", \"pslow\"]\n",
        "\n",
        "  NGEN = 5  # 알고리즘 5번 반복.\n",
        "  NPOP = 100 #인구 초기\n",
        "  CXPB = 0.5  #교차 전략 \n",
        "  MUTPB = 0.3  #돌연변이 전략.\n",
        "\n",
        "\n",
        "  #최소fintness 설정 (fitness값이 작을수록 좋도록 설정)\n",
        "  creator.create(\"FitnessMin\", base.Fitness, weights=(-1.0,))\n",
        "  creator.create('Individual', list, fitness=creator.FitnessMin)\n",
        "\n",
        "  # creator.create(\"FitnessMax\", base.Fitness, weights=(1.0,))\n",
        "  # creator.create(\"Individual\", list, fitness=creator.FitnessMax)\n",
        "\n",
        "  def evaluate(individual, plot=False, log=False):\n",
        "\n",
        "    strategy_params = {k: v for k, v in zip(PARAM_NAMES, individual)}\n",
        "\n",
        "    cerebro = bt.Cerebro(stdstats=False)\n",
        "\n",
        "    data = bt.feeds.PandasData(dataname = df_bt)\n",
        "\n",
        "    cerebro.adddata(data)\n",
        "\n",
        "    initial_capital = 1000000\n",
        "    cerebro.broker.setcash(initial_capital)\n",
        "\n",
        "    cerebro.addstrategy(SmaCross1, **strategy_params)\n",
        "\n",
        "    cerebro.addanalyzer(bt.analyzers.DrawDown)\n",
        "\n",
        "    cerebro.broker.setcommission(commission=0.0025, margin=False)  #수수료 설정\n",
        "\n",
        "    strats = cerebro.run()\n",
        "\n",
        "    profit = cerebro.broker.getvalue() - initial_capital\n",
        "    \n",
        "    if profit == 0:\n",
        "      return [np.inf]\n",
        "\n",
        "    # max_dd = strats[0].analyzers.drawdown.get_analysis()[\"max\"][\"moneydown\"] # max.moneydown - max drawdown value in monetary units\n",
        "    # fitness = profit / (max_dd if max_dd > 0 else 1)\n",
        "    fitness = round(1 / profit, 15)\n",
        "\n",
        "    if log:\n",
        "      print(f\"Starting Portfolio Value: {initial_capital:,.2f}\")\n",
        "      print(f\"Final Portfolio Value:  {cerebro.broker.getvalue():,.2f}\")\n",
        "      print(f\"Total Profit:       {profit:,.2f}\")\n",
        "      print(f\"Profit / Max DD:     {fitness}\")\n",
        "\n",
        "    # if plot:\n",
        "      # cerebro.plot()\n",
        "\n",
        "    return [fitness]\n",
        "\n",
        "  toolbox = base.Toolbox()\n",
        "  toolbox.register(\"indices\", random.sample, range(NPOP), NPOP)\n",
        "\n",
        "  # crossover strategy\n",
        "  toolbox.register(\"mate\", tools.cxUniform, indpb=CXPB)\n",
        "  # mutation strategy\n",
        "  toolbox.register(\"mutate\", tools.mutUniformInt, low=1, up=151, indpb=0.2)\n",
        "  # selection strategy\n",
        "  toolbox.register(\"select\", tools.selTournament, tournsize=3)\n",
        "  # fitness function\n",
        "  toolbox.register(\"evaluate\", evaluate)\n",
        "\n",
        "\n",
        "  # definition of an individual & a population\n",
        "  toolbox.register(\"attr_sma1\", random.randint, 1, 100)\n",
        "  toolbox.register(\"attr_sma2\", random.randint, 151, 251) \n",
        "  toolbox.register(\n",
        "    \"individual\",\n",
        "    tools.initCycle,\n",
        "    creator.Individual,\n",
        "    (\n",
        "      toolbox.attr_sma1,\n",
        "      toolbox.attr_sma2,\n",
        "\n",
        "    ),\n",
        "  )\n",
        "\n",
        "  toolbox.register(\"population\", tools.initRepeat, list, toolbox.individual)\n",
        "\n",
        "  mean = np.ndarray(NGEN)\n",
        "  best = np.ndarray(NGEN)\n",
        "  hall_of_fame = tools.HallOfFame(maxsize=3)\n",
        "\n",
        "  t = time.perf_counter()\n",
        "  pop = toolbox.population(n=NPOP)\n",
        "  for g in trange(NGEN):\n",
        "    # Select the next generation individuals\n",
        "    offspring = toolbox.select(pop, len(pop))\n",
        "    # Clone the selected individuals\n",
        "    offspring = list(map(toolbox.clone, offspring))\n",
        "\n",
        "    # Apply crossover on the offspring\n",
        "    for child1, child2 in zip(offspring[::2], offspring[1::2]):\n",
        "      if random.random() < CXPB:\n",
        "        toolbox.mate(child1, child2)\n",
        "        del child1.fitness.values\n",
        "        del child2.fitness.values\n",
        "\n",
        "    # Apply mutation on the offspring\n",
        "    for mutant in offspring:\n",
        "      if random.random() < MUTPB:\n",
        "        toolbox.mutate(mutant)\n",
        "        del mutant.fitness.values\n",
        "\n",
        "    # Evaluate the individuals with an invalid fitness\n",
        "    invalid_ind = [ind for ind in offspring if not ind.fitness.valid]\n",
        "    fitnesses = toolbox.map(toolbox.evaluate, invalid_ind)\n",
        "    for ind, fit in zip(invalid_ind, fitnesses):\n",
        "      ind.fitness.values = fit\n",
        "\n",
        "    # The population is entirely replaced by the offspring\n",
        "    pop[:] = offspring\n",
        "    hall_of_fame.update(pop)\n",
        "    print(\n",
        "      \"\\n HALL OF FAME:\\n\"\n",
        "      + \"\\n\".join(\n",
        "        [\n",
        "          f\"  {_}: {ind}, Fitness: {ind.fitness.values[0]}\"\n",
        "          for _, ind in enumerate(hall_of_fame)\n",
        "        ]\n",
        "      )\n",
        "    )\n",
        "\n",
        "    fitnesses = [\n",
        "      ind.fitness.values[0] for ind in pop if not np.isinf(ind.fitness.values[0])\n",
        "    ]\n",
        "    mean[g] = np.mean(fitnesses)\n",
        "    best[g] = np.max(fitnesses)\n",
        "\n",
        "  end_t = time.perf_counter()\n",
        "  print(f\"Time Elapsed: {end_t - t:,.2f}\")\n",
        "  \n",
        "  # 최적의 파라미터 값 출력\n",
        "  OPTIMISED_STRATEGY_PARAMS = {\n",
        "    k: v for k, v in zip(PARAM_NAMES, hall_of_fame[0])}\n",
        "  GDC_params = list(OPTIMISED_STRATEGY_PARAMS.values())\n",
        "  print('**GDC 파라미터 값: ', GDC_params)\n",
        "  print('\\n')\n",
        "  \n",
        "# RSI --------------------------------------------------------------------------\n",
        "\n",
        "  random.seed(3)\n",
        "\n",
        "  PARAM_NAMES = [\"period\"]\n",
        "\n",
        "  NGEN = 5  # 알고리즘 5번 반복.\n",
        "  NPOP = 100 #인구 초기\n",
        "  CXPB = 0.5  #교차 전략 \n",
        "  MUTPB = 0.3  #돌연변이 전략.\n",
        "\n",
        "\n",
        "  #최소fintness 설정 (fitness값이 작을수록 좋도록 설정)\n",
        "  creator.create(\"FitnessMin\", base.Fitness, weights=(-1.0,))\n",
        "  creator.create('Individual', list, fitness=creator.FitnessMin)\n",
        "\n",
        "  # creator.create(\"FitnessMax\", base.Fitness, weights=(1.0,))\n",
        "  # creator.create(\"Individual\", list, fitness=creator.FitnessMax)\n",
        "\n",
        "  def evaluate(individual, plot=False, log=False):\n",
        "\n",
        "    strategy_params = {k: v for k, v in zip(PARAM_NAMES, individual)}\n",
        "\n",
        "    cerebro = bt.Cerebro(stdstats=False)\n",
        "\n",
        "    data = bt.feeds.PandasData(dataname = df_bt)\n",
        "\n",
        "    cerebro.adddata(data)\n",
        "\n",
        "    initial_capital = 1000000\n",
        "    cerebro.broker.setcash(initial_capital)\n",
        "\n",
        "    cerebro.addstrategy(RSI, **strategy_params)\n",
        "\n",
        "    cerebro.addanalyzer(bt.analyzers.DrawDown)\n",
        "\n",
        "    cerebro.broker.setcommission(commission=0.0025, margin=False)  #수수료 설정\n",
        "\n",
        "    strats = cerebro.run()\n",
        "\n",
        "    profit = cerebro.broker.getvalue() - initial_capital\n",
        "    \n",
        "    if profit == 0:\n",
        "      return [np.inf]\n",
        "\n",
        "    # max_dd = strats[0].analyzers.drawdown.get_analysis()[\"max\"][\"moneydown\"] # max.moneydown - max drawdown value in monetary units\n",
        "    # fitness = profit / (max_dd if max_dd > 0 else 1)\n",
        "    fitness = round(1 / profit, 15)\n",
        "\n",
        "    if log:\n",
        "      print(f\"Starting Portfolio Value: {initial_capital:,.2f}\")\n",
        "      print(f\"Final Portfolio Value:  {cerebro.broker.getvalue():,.2f}\")\n",
        "      print(f\"Total Profit:       {profit:,.2f}\")\n",
        "      print(f\"Profit / Max DD:     {fitness}\")\n",
        "\n",
        "    # if plot:\n",
        "      # cerebro.plot()\n",
        "\n",
        "    return [fitness]\n",
        "\n",
        "  toolbox = base.Toolbox()\n",
        "  toolbox.register(\"indices\", random.sample, range(NPOP), NPOP)\n",
        "\n",
        "  # crossover strategy\n",
        "  toolbox.register(\"mate\", tools.cxUniform, indpb=CXPB)\n",
        "  # mutation strategy\n",
        "  toolbox.register(\"mutate\", tools.mutUniformInt, low=1, up=151, indpb=0.2)\n",
        "  # selection strategy\n",
        "  toolbox.register(\"select\", tools.selTournament, tournsize=3)\n",
        "  # fitness function\n",
        "  toolbox.register(\"evaluate\", evaluate)\n",
        "\n",
        "\n",
        "  # definition of an individual & a population\n",
        "  toolbox.register(\"attr_period\", random.randint, 1, 100)\n",
        "  toolbox.register(\n",
        "    \"individual\",\n",
        "    tools.initCycle,\n",
        "    creator.Individual,\n",
        "    (\n",
        "      toolbox.attr_period,\n",
        "\n",
        "    ),\n",
        "  )\n",
        "\n",
        "  toolbox.register(\"population\", tools.initRepeat, list, toolbox.individual)\n",
        "\n",
        "  mean = np.ndarray(NGEN)\n",
        "  best = np.ndarray(NGEN)\n",
        "  hall_of_fame = tools.HallOfFame(maxsize=3)\n",
        "\n",
        "  t = time.perf_counter()\n",
        "  pop = toolbox.population(n=NPOP)\n",
        "  for g in trange(NGEN):\n",
        "    # Select the next generation individuals\n",
        "    offspring = toolbox.select(pop, len(pop))\n",
        "    # Clone the selected individuals\n",
        "    offspring = list(map(toolbox.clone, offspring))\n",
        "\n",
        "    # Apply crossover on the offspring\n",
        "    for child1, child2 in zip(offspring[::2], offspring[1::2]):\n",
        "      if random.random() < CXPB:\n",
        "        toolbox.mate(child1, child2)\n",
        "        del child1.fitness.values\n",
        "        del child2.fitness.values\n",
        "\n",
        "    # Apply mutation on the offspring\n",
        "    for mutant in offspring:\n",
        "      if random.random() < MUTPB:\n",
        "        toolbox.mutate(mutant)\n",
        "        del mutant.fitness.values\n",
        "\n",
        "    # Evaluate the individuals with an invalid fitness\n",
        "    invalid_ind = [ind for ind in offspring if not ind.fitness.valid]\n",
        "    fitnesses = toolbox.map(toolbox.evaluate, invalid_ind)\n",
        "    for ind, fit in zip(invalid_ind, fitnesses):\n",
        "      ind.fitness.values = fit\n",
        "\n",
        "    # The population is entirely replaced by the offspring\n",
        "    pop[:] = offspring\n",
        "    hall_of_fame.update(pop)\n",
        "    print(\n",
        "      \"\\n HALL OF FAME:\\n\"\n",
        "      + \"\\n\".join(\n",
        "        [\n",
        "          f\"  {_}: {ind}, Fitness: {ind.fitness.values[0]}\"\n",
        "          for _, ind in enumerate(hall_of_fame)\n",
        "        ]\n",
        "      )\n",
        "    )\n",
        "\n",
        "    fitnesses = [\n",
        "      ind.fitness.values[0] for ind in pop if not np.isinf(ind.fitness.values[0])\n",
        "    ]\n",
        "    mean[g] = np.mean(fitnesses)\n",
        "    best[g] = np.max(fitnesses)\n",
        "\n",
        "  end_t = time.perf_counter()\n",
        "  print(f\"Time Elapsed: {end_t - t:,.2f}\")\n",
        "\n",
        "  # 최적의 파라미터 값 출력\n",
        "  OPTIMISED_STRATEGY_PARAMS = {\n",
        "    k: v for k, v in zip(PARAM_NAMES, hall_of_fame[0])}\n",
        "  RSI_params = list(OPTIMISED_STRATEGY_PARAMS.values())\n",
        "  print('RSI 파라미터 값: ', RSI_params)\n",
        "  print('\\n')\n",
        "\n",
        "# ROC --------------------------------------------------------------------------\n",
        "\n",
        "  random.seed(3)\n",
        "\n",
        "  PARAM_NAMES = [\"period\"]\n",
        "\n",
        "  NGEN = 5  # 알고리즘 5번 반복.\n",
        "  NPOP = 100 #인구 초기\n",
        "  CXPB = 0.5  #교차 전략 \n",
        "  MUTPB = 0.3  #돌연변이 전략.\n",
        "\n",
        "\n",
        "  #최소fintness 설정 (fitness값이 작을수록 좋도록 설정)\n",
        "  creator.create(\"FitnessMin\", base.Fitness, weights=(-1.0,))\n",
        "  creator.create('Individual', list, fitness=creator.FitnessMin)\n",
        "\n",
        "  # creator.create(\"FitnessMax\", base.Fitness, weights=(1.0,))\n",
        "  # creator.create(\"Individual\", list, fitness=creator.FitnessMax)\n",
        "\n",
        "  def evaluate(individual, plot=False, log=False):\n",
        "\n",
        "    strategy_params = {k: v for k, v in zip(PARAM_NAMES, individual)}\n",
        "\n",
        "    cerebro = bt.Cerebro(stdstats=False)\n",
        "\n",
        "    data = bt.feeds.PandasData(dataname = df_bt)\n",
        "\n",
        "    cerebro.adddata(data)\n",
        "\n",
        "    initial_capital = 1000000\n",
        "    cerebro.broker.setcash(initial_capital)\n",
        "\n",
        "    cerebro.addstrategy(ROC, **strategy_params)\n",
        "\n",
        "    cerebro.addanalyzer(bt.analyzers.DrawDown)\n",
        "\n",
        "    cerebro.broker.setcommission(commission=0.0025, margin=False)  #수수료 설정\n",
        "\n",
        "    strats = cerebro.run()\n",
        "\n",
        "    profit = cerebro.broker.getvalue() - initial_capital\n",
        "\n",
        "    if profit == 0:\n",
        "      return [np.inf]\n",
        "\n",
        "    # max_dd = strats[0].analyzers.drawdown.get_analysis()[\"max\"][\"moneydown\"] # max.moneydown - max drawdown value in monetary units\n",
        "    # fitness = profit / (max_dd if max_dd > 0 else 1)\n",
        "    fitness = round(1 / profit, 15)\n",
        "\n",
        "    if log:\n",
        "      print(f\"Starting Portfolio Value: {initial_capital:,.2f}\")\n",
        "      print(f\"Final Portfolio Value:  {cerebro.broker.getvalue():,.2f}\")\n",
        "      print(f\"Total Profit:       {profit:,.2f}\")\n",
        "      print(f\"Profit / Max DD:     {fitness}\")\n",
        "\n",
        "    # if plot:\n",
        "      # cerebro.plot()\n",
        "\n",
        "    return [fitness]\n",
        "\n",
        "  toolbox = base.Toolbox()\n",
        "  toolbox.register(\"indices\", random.sample, range(NPOP), NPOP)\n",
        "\n",
        "  # crossover strategy\n",
        "  toolbox.register(\"mate\", tools.cxUniform, indpb=CXPB)\n",
        "  # mutation strategy\n",
        "  toolbox.register(\"mutate\", tools.mutUniformInt, low=1, up=151, indpb=0.2)\n",
        "  # selection strategy\n",
        "  toolbox.register(\"select\", tools.selTournament, tournsize=3)\n",
        "  # fitness function\n",
        "  toolbox.register(\"evaluate\", evaluate)\n",
        "\n",
        "\n",
        "  # definition of an individual & a population\n",
        "  toolbox.register(\"attr_period\", random.randint, 1, 100)\n",
        "  toolbox.register(\n",
        "    \"individual\",\n",
        "    tools.initCycle,\n",
        "    creator.Individual,\n",
        "    (\n",
        "      toolbox.attr_period,\n",
        "\n",
        "    ),\n",
        "  )\n",
        "\n",
        "  toolbox.register(\"population\", tools.initRepeat, list, toolbox.individual)\n",
        "\n",
        "  mean = np.ndarray(NGEN)\n",
        "  best = np.ndarray(NGEN)\n",
        "  hall_of_fame = tools.HallOfFame(maxsize=3)\n",
        "\n",
        "  t = time.perf_counter()\n",
        "  pop = toolbox.population(n=NPOP)\n",
        "  for g in trange(NGEN):\n",
        "    # Select the next generation individuals\n",
        "    offspring = toolbox.select(pop, len(pop))\n",
        "    # Clone the selected individuals\n",
        "    offspring = list(map(toolbox.clone, offspring))\n",
        "\n",
        "    # Apply crossover on the offspring\n",
        "    for child1, child2 in zip(offspring[::2], offspring[1::2]):\n",
        "      if random.random() < CXPB:\n",
        "        toolbox.mate(child1, child2)\n",
        "        del child1.fitness.values\n",
        "        del child2.fitness.values\n",
        "\n",
        "    # Apply mutation on the offspring\n",
        "    for mutant in offspring:\n",
        "      if random.random() < MUTPB:\n",
        "        toolbox.mutate(mutant)\n",
        "        del mutant.fitness.values\n",
        "\n",
        "    # Evaluate the individuals with an invalid fitness\n",
        "    invalid_ind = [ind for ind in offspring if not ind.fitness.valid]\n",
        "    fitnesses = toolbox.map(toolbox.evaluate, invalid_ind)\n",
        "    for ind, fit in zip(invalid_ind, fitnesses):\n",
        "      ind.fitness.values = fit\n",
        "\n",
        "    # The population is entirely replaced by the offspring\n",
        "    pop[:] = offspring\n",
        "    hall_of_fame.update(pop)\n",
        "    print(\n",
        "      \"\\n HALL OF FAME:\\n\"\n",
        "      + \"\\n\".join(\n",
        "        [\n",
        "          f\"  {_}: {ind}, Fitness: {ind.fitness.values[0]}\"\n",
        "          for _, ind in enumerate(hall_of_fame)\n",
        "        ]\n",
        "      )\n",
        "    )\n",
        "\n",
        "    fitnesses = [\n",
        "      ind.fitness.values[0] for ind in pop if not np.isinf(ind.fitness.values[0])\n",
        "    ]\n",
        "    mean[g] = np.mean(fitnesses)\n",
        "    best[g] = np.max(fitnesses)\n",
        "\n",
        "  end_t = time.perf_counter()\n",
        "  print(f\"Time Elapsed: {end_t - t:,.2f}\")\n",
        "  \n",
        "  # 최적의 파라미터 값 출력\n",
        "  OPTIMISED_STRATEGY_PARAMS = {\n",
        "    k: v for k, v in zip(PARAM_NAMES, hall_of_fame[0])}\n",
        "  ROC_params = list(OPTIMISED_STRATEGY_PARAMS.values())\n",
        "  print('**ROC 파라미터 값: ', ROC_params)\n",
        "\n",
        "# MAE --------------------------------------------------------------------------\n",
        "\n",
        "  # random.seed(3)\n",
        "\n",
        "  # PARAM_NAMES = [\"period_1\", \"period_2\", \"period_signal\"]\n",
        "\n",
        "  # NGEN = 5   # 알고리즘 5번 반복.\n",
        "  # NPOP = 100  #인구 초기\n",
        "  # CXPB = 0.5   #교차 전략 \n",
        "  # MUTPB = 0.3   #돌연변이 전략.\n",
        "\n",
        "\n",
        "  # #최소fintness 설정.(fitness값이 작을수록 좋도록 설정.)\n",
        "  # #creator.create(\"FitnessMin\", base.Fitness, weights=(-1.0,))\n",
        "  # #creator.create('Individual', list, fitness=creator.FitnessMin)\n",
        "\n",
        "  # creator.create(\"FitnessMax\", base.Fitness, weights=(1.0,))\n",
        "  # creator.create(\"Individual\", list, fitness=creator.FitnessMax)\n",
        "\n",
        "  # def evaluate(individual, plot=False, log=False):\n",
        "\n",
        "  #   strategy_params = {k: v for k, v in zip(PARAM_NAMES, individual)}\n",
        "\n",
        "  #   cerebro = bt.Cerebro(stdstats=False)\n",
        "\n",
        "  #   data = bt.feeds.PandasData(dataname = df_bt)\n",
        "\n",
        "  #   cerebro.adddata(data)\n",
        "\n",
        "  #   initial_capital = 1000000\n",
        "  #   cerebro.broker.setcash(initial_capital)\n",
        "\n",
        "  #   cerebro.addstrategy(RSI, **strategy_params)\n",
        "\n",
        "  #   cerebro.addanalyzer(bt.analyzers.DrawDown)\n",
        "\n",
        "  #   cerebro.broker.setcommission(commission=0.0025, margin=False)   #수수료 설정.\n",
        "\n",
        "  #   strats = cerebro.run()\n",
        "\n",
        "  #   profit = cerebro.broker.getvalue() - initial_capital\n",
        "\n",
        "  #   if profit == 0:\n",
        "  #     return [np.inf]\n",
        "\n",
        "  #   # max_dd = strats[0].analyzers.drawdown.get_analysis()[\"max\"][\"moneydown\"]\n",
        "  #   # fitness = profit / (max_dd if max_dd > 0 else 1)\n",
        "  #   fitness = round(1 / profit, 15)\n",
        "\n",
        "  #   if log:\n",
        "  #     print(f\"Starting Portfolio Value: {initial_capital:,.2f}\")\n",
        "  #     print(f\"Final Portfolio Value:    {cerebro.broker.getvalue():,.2f}\")\n",
        "  #     print(f\"Total Profit:             {profit:,.2f}\")\n",
        "  #     print(f\"Profit / Max DD:          {fitness}\")\n",
        "\n",
        "  #   if plot:\n",
        "  #     cerebro.plot()\n",
        "\n",
        "  #   return [fitness]\n",
        "\n",
        "  # toolbox = base.Toolbox()\n",
        "  # toolbox.register(\"indices\", random.sample, range(NPOP), NPOP)\n",
        "\n",
        "  # # crossover strategy\n",
        "  # toolbox.register(\"mate\", tools.cxUniform, indpb=CXPB)\n",
        "  # # mutation strategy\n",
        "  # toolbox.register(\"mutate\", tools.mutUniformInt, low=1, up=151, indpb=0.2)\n",
        "  # # selection strategy\n",
        "  # toolbox.register(\"select\", tools.selTournament, tournsize=3)\n",
        "  # # fitness function\n",
        "  # toolbox.register(\"evaluate\", evaluate)\n",
        "\n",
        "\n",
        "  # # definition of an individual & a population\n",
        "  # toolbox.register(\"attr_period\", random.randint, 1, 100)  #기간 1~100 범위 설정.\n",
        "  # toolbox.register(\n",
        "  #     \"individual\",\n",
        "  #     tools.initCycle,\n",
        "  #     creator.Individual,\n",
        "  #     (\n",
        "  #         toolbox.attr_period,\n",
        "\n",
        "  #     ),\n",
        "  # )\n",
        "\n",
        "  # toolbox.register(\"population\", tools.initRepeat, list, toolbox.individual)\n",
        "\n",
        "  # mean = np.ndarray(NGEN)\n",
        "  # best = np.ndarray(NGEN)\n",
        "  # hall_of_fame = tools.HallOfFame(maxsize=3)\n",
        "\n",
        "  # t = time.perf_counter()\n",
        "  # pop = toolbox.population(n=NPOP)\n",
        "  # for g in trange(NGEN):\n",
        "  #     # Select the next generation individuals\n",
        "  #     offspring = toolbox.select(pop, len(pop))\n",
        "  #     # Clone the selected individuals\n",
        "  #     offspring = list(map(toolbox.clone, offspring))\n",
        "\n",
        "  #     # Apply crossover on the offspring\n",
        "  #     for child1, child2 in zip(offspring[::2], offspring[1::2]):\n",
        "  #         if random.random() < CXPB:\n",
        "  #             toolbox.mate(child1, child2)\n",
        "  #             del child1.fitness.values\n",
        "  #             del child2.fitness.values\n",
        "\n",
        "  #     # Apply mutation on the offspring\n",
        "  #     for mutant in offspring:\n",
        "  #         if random.random() < MUTPB:\n",
        "  #             toolbox.mutate(mutant)\n",
        "  #             del mutant.fitness.values\n",
        "\n",
        "  #     # Evaluate the individuals with an invalid fitness\n",
        "  #     invalid_ind = [ind for ind in offspring if not ind.fitness.valid]\n",
        "  #     fitnesses = toolbox.map(toolbox.evaluate, invalid_ind)\n",
        "  #     for ind, fit in zip(invalid_ind, fitnesses):\n",
        "  #         ind.fitness.values = fit\n",
        "\n",
        "  #     # The population is entirely replaced by the offspring\n",
        "  #     pop[:] = offspring\n",
        "  #     hall_of_fame.update(pop)\n",
        "  #     print(\n",
        "  #         \"\\n HALL OF FAME:\\n\"\n",
        "  #         + \"\\n\".join(\n",
        "  #             [\n",
        "  #                 f\"    {_}: {ind}, Fitness: {ind.fitness.values[0]}\"\n",
        "  #                 for _, ind in enumerate(hall_of_fame)\n",
        "  #             ]\n",
        "  #         )\n",
        "  #     )\n",
        "\n",
        "  #     fitnesses = [\n",
        "  #         ind.fitness.values[0] for ind in pop if not np.isinf(ind.fitness.values[0])\n",
        "  #     ]\n",
        "  #     mean[g] = np.mean(fitnesses)\n",
        "  #     best[g] = np.max(fitnesses)\n",
        "\n",
        "  # end_t = time.perf_counter()\n",
        "  # print(f\"Time Elapsed: {end_t - t:,.2f}\")\n",
        "\n",
        "  # OPTIMISED_STRATEGY_PARAMS = {\n",
        "  #   k: v for k, v in zip(PARAM_NAMES, hall_of_fame[0])}\n",
        "  # MAE_params = list(OPTIMISED_STRATEGY_PARAMS.values())\n",
        "  # print('**파라미터 값: ', MAE_params)\n",
        "\n",
        "# # STC --------------------------------------------------------------------------\n",
        "\n",
        "#   random.seed(3)\n",
        "\n",
        "#   PARAM_NAMES = [\"period\",\"pfast\",\"pslow\",\"upperLimit\",\"lowerLimit\"]\n",
        "\n",
        "#   NGEN = 5  # 알고리즘 5번 반복.\n",
        "#   NPOP = 100 #인구 초기\n",
        "#   CXPB = 0.5  #교차 전략 \n",
        "#   MUTPB = 0.3  #돌연변이 전략.\n",
        "\n",
        "\n",
        "#   #최소fintness 설정 (fitness값이 작을수록 좋도록 설정)\n",
        "#   creator.create(\"FitnessMin\", base.Fitness, weights=(-1.0,))\n",
        "#   creator.create('Individual', list, fitness=creator.FitnessMin)\n",
        "\n",
        "#   # creator.create(\"FitnessMax\", base.Fitness, weights=(1.0,))\n",
        "#   # creator.create(\"Individual\", list, fitness=creator.FitnessMax)\n",
        "\n",
        "#   def evaluate(individual, plot=False, log=False):\n",
        "\n",
        "#     strategy_params = {k: v for k, v in zip(PARAM_NAMES, individual)}\n",
        "\n",
        "#     cerebro = bt.Cerebro(stdstats=False)\n",
        "\n",
        "#     data = bt.feeds.PandasData(dataname = df_bt, name = i)\n",
        "\n",
        "#     cerebro.adddata(data)\n",
        "\n",
        "#     initial_capital = 1000000\n",
        "#     cerebro.broker.setcash(initial_capital)\n",
        "\n",
        "#     cerebro.addstrategy((StochasticSR, **strategy_params)\n",
        "\n",
        "#     cerebro.addanalyzer(bt.analyzers.DrawDown)\n",
        "\n",
        "#     cerebro.broker.setcommission(commission=0.0025, margin=False)  #수수료 설정\n",
        "\n",
        "#     strats = cerebro.run()\n",
        "\n",
        "#     profit = cerebro.broker.getvalue() - initial_capital\n",
        "\n",
        "#     # max_dd = strats[0].analyzers.drawdown.get_analysis()[\"max\"][\"moneydown\"] # max.moneydown - max drawdown value in monetary units\n",
        "#     # fitness = profit / (max_dd if max_dd > 0 else 1)\n",
        "#     fitness = round(1 / profit, 15)\n",
        "\n",
        "#     if log:\n",
        "#       print(f\"Starting Portfolio Value: {initial_capital:,.2f}\")\n",
        "#       print(f\"Final Portfolio Value:  {cerebro.broker.getvalue():,.2f}\")\n",
        "#       print(f\"Total Profit:       {profit:,.2f}\")\n",
        "#       print(f\"Maximum Drawdown:     {max_dd:,.2f}\")\n",
        "#       print(f\"Profit / Max DD:     {fitness}\")\n",
        "\n",
        "#     # if plot:\n",
        "#       # cerebro.plot()\n",
        "\n",
        "#     return [fitness]\n",
        "\n",
        "#   toolbox = base.Toolbox()\n",
        "#   toolbox.register(\"indices\", random.sample, range(NPOP), NPOP)\n",
        "\n",
        "#   # crossover strategy\n",
        "#   toolbox.register(\"mate\", tools.cxUniform, indpb=CXPB)\n",
        "#   # mutation strategy\n",
        "#   toolbox.register(\"mutate\", tools.mutUniformInt, low=1, up=151, indpb=0.2)\n",
        "#   # selection strategy\n",
        "#   toolbox.register(\"select\", tools.selTournament, tournsize=3)\n",
        "#   # fitness function\n",
        "#   toolbox.register(\"evaluate\", evaluate)\n",
        "\n",
        "\n",
        "#   # definition of an individual & a population\n",
        "#   # 파라미터 개수 및 범위 설정 - toolbox.register\n",
        "#   toolbox.register('attr_period', random.randint, 5, 31) \n",
        "#   toolbox.register('attr_pfast', random.randint, 2, 21)\n",
        "#   toolbox.register('attr_pslow', random.randint, 2, 21)\n",
        "#   toolbox.register('attr_upperLimit', random.randint, 70, 91)\n",
        "#   toolbox.register('attr_lowerLimit', random.randint, 10, 31)\n",
        "\n",
        "\n",
        "#   toolbox.register(\n",
        "#     \"individual\",\n",
        "#     tools.initCycle,\n",
        "#     creator.Individual,\n",
        "#     (   # 파라미터 개수 설정\n",
        "#         toolbox.attr_period,\n",
        "#         toolbox.attr_pfast,\n",
        "#         toolbox.attr_pslow,\n",
        "#         toolbox.attr_upperLimit,\n",
        "#         toolbox.attr_lowerLimit,\n",
        "#     ),\n",
        "#   )\n",
        "\n",
        "#   toolbox.register(\"population\", tools.initRepeat, list, toolbox.individual)\n",
        "\n",
        "#   mean = np.ndarray(NGEN)\n",
        "#   best = np.ndarray(NGEN)\n",
        "#   hall_of_fame = tools.HallOfFame(maxsize=3)\n",
        "\n",
        "#   t = time.perf_counter()\n",
        "#   pop = toolbox.population(n=NPOP)\n",
        "#   for g in trange(NGEN):\n",
        "#     # Select the next generation individuals\n",
        "#     offspring = toolbox.select(pop, len(pop))\n",
        "#     # Clone the selected individuals\n",
        "#     offspring = list(map(toolbox.clone, offspring))\n",
        "\n",
        "#     # Apply crossover on the offspring\n",
        "#     for child1, child2 in zip(offspring[::2], offspring[1::2]):\n",
        "#       if random.random() < CXPB:\n",
        "#         toolbox.mate(child1, child2)\n",
        "#         del child1.fitness.values\n",
        "#         del child2.fitness.values\n",
        "\n",
        "#     # Apply mutation on the offspring\n",
        "#     for mutant in offspring:\n",
        "#       if random.random() < MUTPB:\n",
        "#         toolbox.mutate(mutant)\n",
        "#         del mutant.fitness.values\n",
        "\n",
        "#     # Evaluate the individuals with an invalid fitness\n",
        "#     invalid_ind = [ind for ind in offspring if not ind.fitness.valid]\n",
        "#     fitnesses = toolbox.map(toolbox.evaluate, invalid_ind)\n",
        "#     for ind, fit in zip(invalid_ind, fitnesses):\n",
        "#       ind.fitness.values = fit\n",
        "\n",
        "#     # The population is entirely replaced by the offspring\n",
        "#     pop[:] = offspring\n",
        "#     hall_of_fame.update(pop)\n",
        "#     print(\n",
        "#       \"HALL OF FAME:\\n\"\n",
        "#       + \"\\n\".join(\n",
        "#         [\n",
        "#           f\"  {_}: {ind}, Fitness: {ind.fitness.values[0]}\"\n",
        "#           for _, ind in enumerate(hall_of_fame)\n",
        "#         ]\n",
        "#       )\n",
        "#     )\n",
        "\n",
        "#     fitnesses = [\n",
        "#       ind.fitness.values[0] for ind in pop if not np.isinf(ind.fitness.values[0])\n",
        "#     ]\n",
        "#     mean[g] = np.mean(fitnesses)\n",
        "#     best[g] = np.max(fitnesses)\n",
        "\n",
        "#   end_t = time.perf_counter()\n",
        "#   print(f\"Time Elapsed: {end_t - t:,.2f}\")\n",
        "  \n",
        "#   # 최적의 파라미터 값 출력\n",
        "#   OPTIMISED_STRATEGY_PARAMS = {\n",
        "#     k: v for k, v in zip(PARAM_NAMES, hall_of_fame[0])}\n",
        "#   STC_params = list(OPTIMISED_STRATEGY_PARAMS.values())\n",
        "#   print('**STC 파라미터 값: ', STC_params)\n",
        "\n",
        "\n",
        "  # 데이터 불러와서 가공 ------------------------------------------------------------\n",
        "  df = pd.read_json(json_data[fullcode_list0[j]], orient ='index') \n",
        "  read_df = df.transpose()\n",
        "\n",
        "  read_df[\"GDC_sig\"] = \"\"\n",
        "  read_df[\"RSI_sig\"] = \"\"\n",
        "  read_df[\"ROC_sig\"] = \"\"\n",
        "  # read_df[\"MAE_sig\"] = \"\"\n",
        "  read_df[\"STC_sig\"] = \"\"\n",
        "\n",
        "  read_df['TDD_CLSPRC'] = read_df['TDD_CLSPRC'].str.replace(',','').astype('float')\n",
        "  read_df['pfast'] = talib.MA(read_df['TDD_CLSPRC'], timeperiod = GDC_params[0], matype=0)\n",
        "  read_df['pslow'] = talib.MA(read_df['TDD_CLSPRC'], timeperiod = GDC_params[1], matype=0)\n",
        "  read_df['RSI'] = talib.RSI(read_df['TDD_CLSPRC'], timeperiod = RSI_params[0])\n",
        "  read_df['ROC'] = talib.ROC(read_df['TDD_CLSPRC'], timeperiod = ROC_params[0])\n",
        "  # read_df['MAE'] = talib.EMA(read_df['TDD_CLSPRC'], timeperiod = MAE_params[0]) # 60일 지수 이동평균\n",
        "  # read_df['slowk'], read_df['slowd'] = talib.STOCH(read_df['TDD_HGPRC'], read_df['TDD_LWPRC'], read_df['TDD_CLSPRC'], fastk_period=5, slowk_period=3, slowk_matype=0, slowd_period=3, slowd_matype=0)\n",
        "\n",
        "\n",
        "  # 매도, 매수 전략 설정 후 GDC_sig 열 추가\n",
        "  first_cross = 0 \n",
        "  for i in range(0, len(read_df)):\n",
        "    if read_df['pfast'][i] < read_df['pslow'][i] and first_cross == 0:\n",
        "      # print('Death cross on day', df['TRD_DD'][i], ':expect the price to continue to fall (매도)')\n",
        "      read_df['GDC_sig'][i] = -1\n",
        "      first_cross=1\n",
        "    elif read_df['pfast'][i] > read_df['pslow'][i] and first_cross ==1:\n",
        "      # print('Golden cross on day', df['TRD_DD'][i], ':expect the price to continue to rise (매수)')\n",
        "      first_cross=0\n",
        "      read_df['GDC_sig'][i] = 1\n",
        "    else:\n",
        "      read_df['GDC_sig'][i] = 0\n",
        "\n",
        "  # 매도 매수 전략 설정 후 RSI_sig 열 추가\n",
        "  for i in range(0, len(read_df)):\n",
        "    if read_df['RSI'][i] < 30: # 30보다 작으면 매수시점\n",
        "        read_df['RSI_sig'][i] = 1\n",
        "    elif read_df['RSI'][i] >= 70: # 70보다 크면 매도시점\n",
        "        read_df['RSI_sig'][i] = -1\n",
        "    else:\n",
        "        read_df['RSI_sig'][i] = 0\n",
        "\n",
        "  # 매도 매수 전략 설정 후 ROC_sig 열 추가\n",
        "  for i in range(0, len(read_df)):\n",
        "    if read_df['ROC'][i] < 0: # 30보다 작으면 매도시점\n",
        "        read_df['ROC_sig'][i] = -1\n",
        "    elif read_df['ROC'][i] >= 0: # 70보다 크면 매수시점\n",
        "        read_df['ROC_sig'][i] = 1\n",
        "\n",
        "  # 매도 매수 전략 설정 후 MAE_sig 열 추가\n",
        "  \n",
        "  # 매도 매수 전략 설정 후 STC_sig 열 추가\n",
        "\n",
        "  # result = read_df.drop(['pfast', 'pslow', 'RSI'], axis='columns')\n",
        "  result = read_df[['TRD_DD','MKTCAP', 'GDC_sig', 'RSI_sig', 'ROC_sig']]\n",
        "  print(result)\n",
        "\n",
        "  # result_js = result.to_json(orient = 'columns') # 데이터프레임을 json 형태로 변환\n",
        "  # result_dict[fullcode_list0[j]] = result_js # fullcode가 key값이 되고 json이 value값이 됨\n",
        "\n",
        "# with open('/content/drive/MyDrive/[Shared]K-Project/data/test1.json', 'w') as f:\n",
        "#     json.dump(result_dict, f)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "KR7060310000\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/deap/creator.py:141: RuntimeWarning: A class named 'FitnessMin' has already been created and it will be overwritten. Consider deleting previous creation of that class or rename it.\n",
            "  RuntimeWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/deap/creator.py:141: RuntimeWarning: A class named 'Individual' has already been created and it will be overwritten. Consider deleting previous creation of that class or rename it.\n",
            "  RuntimeWarning)\n",
            " 20%|██        | 1/5 [02:45<11:03, 165.95s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " HALL OF FAME:\n",
            "  0: [3, 193], Fitness: -3.1397568572e-05\n",
            "  1: [67, 200], Fitness: -1.7942111571e-05\n",
            "  2: [4, 186], Fitness: -1.7186796416e-05\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 40%|████      | 2/5 [04:30<06:29, 129.71s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " HALL OF FAME:\n",
            "  0: [3, 193], Fitness: -3.1397568572e-05\n",
            "  1: [67, 200], Fitness: -1.7942111571e-05\n",
            "  2: [4, 186], Fitness: -1.7186796416e-05\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 60%|██████    | 3/5 [06:13<03:54, 117.39s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " HALL OF FAME:\n",
            "  0: [3, 193], Fitness: -3.1397568572e-05\n",
            "  1: [67, 200], Fitness: -1.7942111571e-05\n",
            "  2: [8, 191], Fitness: -1.7704880882e-05\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 80%|████████  | 4/5 [08:10<01:57, 117.60s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " HALL OF FAME:\n",
            "  0: [8, 166], Fitness: -4.0458905131e-05\n",
            "  1: [3, 193], Fitness: -3.1397568572e-05\n",
            "  2: [67, 200], Fitness: -1.7942111571e-05\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 5/5 [09:52<00:00, 118.52s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " HALL OF FAME:\n",
            "  0: [8, 166], Fitness: -4.0458905131e-05\n",
            "  1: [3, 193], Fitness: -3.1397568572e-05\n",
            "  2: [67, 206], Fitness: -2.2140254082e-05\n",
            "Time Elapsed: 592.61\n",
            "**GDC 파라미터 값:  [8, 166]\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 20%|██        | 1/5 [02:34<10:17, 154.33s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " HALL OF FAME:\n",
            "  0: [25], Fitness: -0.001127554615927\n",
            "  1: [9], Fitness: -0.001105292971718\n",
            "  2: [39], Fitness: -0.000529408650537\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 40%|████      | 2/5 [04:18<06:14, 124.96s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " HALL OF FAME:\n",
            "  0: [25], Fitness: -0.001127554615927\n",
            "  1: [9], Fitness: -0.001105292971718\n",
            "  2: [39], Fitness: -0.000529408650537\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 60%|██████    | 3/5 [05:57<03:45, 112.88s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " HALL OF FAME:\n",
            "  0: [25], Fitness: -0.001127554615927\n",
            "  1: [9], Fitness: -0.001105292971718\n",
            "  2: [39], Fitness: -0.000529408650537\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 80%|████████  | 4/5 [07:51<01:53, 113.27s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " HALL OF FAME:\n",
            "  0: [25], Fitness: -0.001127554615927\n",
            "  1: [9], Fitness: -0.001105292971718\n",
            "  2: [39], Fitness: -0.000529408650537\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 5/5 [09:47<00:00, 117.54s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " HALL OF FAME:\n",
            "  0: [25], Fitness: -0.001127554615927\n",
            "  1: [9], Fitness: -0.001105292971718\n",
            "  2: [39], Fitness: -0.000529408650537\n",
            "Time Elapsed: 587.72\n",
            "RSI 파라미터 값:  [25]\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 20%|██        | 1/5 [02:47<11:11, 167.90s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " HALL OF FAME:\n",
            "  0: [37], Fitness: -0.004960932655346\n",
            "  1: [25], Fitness: -0.00286841161707\n",
            "  2: [47], Fitness: -0.001375894331315\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 40%|████      | 2/5 [04:37<06:40, 133.50s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " HALL OF FAME:\n",
            "  0: [37], Fitness: -0.004960932655346\n",
            "  1: [25], Fitness: -0.00286841161707\n",
            "  2: [47], Fitness: -0.001375894331315\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 60%|██████    | 3/5 [06:23<04:01, 120.83s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " HALL OF FAME:\n",
            "  0: [37], Fitness: -0.004960932655346\n",
            "  1: [25], Fitness: -0.00286841161707\n",
            "  2: [47], Fitness: -0.001375894331315\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 80%|████████  | 4/5 [08:23<02:00, 120.75s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " HALL OF FAME:\n",
            "  0: [37], Fitness: -0.004960932655346\n",
            "  1: [25], Fitness: -0.00286841161707\n",
            "  2: [47], Fitness: -0.001375894331315\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 5/5 [10:27<00:00, 125.45s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " HALL OF FAME:\n",
            "  0: [37], Fitness: -0.004960932655346\n",
            "  1: [25], Fitness: -0.00286841161707\n",
            "  2: [47], Fitness: -0.001375894331315\n",
            "Time Elapsed: 627.26\n",
            "**ROC 파라미터 값:  [37]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "          TRD_DD           MKTCAP GDC_sig RSI_sig ROC_sig\n",
            "0     2021/12/16  153,621,423,160       0       0        \n",
            "1     2021/12/15  153,158,708,030       0       0        \n",
            "2     2021/12/14  156,860,429,070       0       0        \n",
            "3     2021/12/13  157,554,501,765       0       0        \n",
            "4     2021/12/10  158,711,289,590       0       0        \n",
            "...          ...              ...     ...     ...     ...\n",
            "4856  2002/04/29   16,272,000,000       0       0       1\n",
            "4857  2002/04/26   18,480,000,000       0       0       1\n",
            "4858  2002/04/25   21,000,000,000       0       0       1\n",
            "4859  2002/04/24   20,424,000,000       0       0       1\n",
            "4860  2002/04/23   18,240,000,000       0       0       1\n",
            "\n",
            "[4861 rows x 5 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 최종적인 저장 형태\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HrN-SwZCW3Sg",
        "outputId": "b9435136-fa7b-4c3c-aae3-1930fe9abf96"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "          TRD_DD           MKTCAP GDC_sig RSI_sig ROC_sig\n",
            "0     2021/12/16  153,621,423,160       0       0        \n",
            "1     2021/12/15  153,158,708,030       0       0        \n",
            "2     2021/12/14  156,860,429,070       0       0        \n",
            "3     2021/12/13  157,554,501,765       0       0        \n",
            "4     2021/12/10  158,711,289,590       0       0        \n",
            "...          ...              ...     ...     ...     ...\n",
            "4856  2002/04/29   16,272,000,000       0       0       1\n",
            "4857  2002/04/26   18,480,000,000       0       0       1\n",
            "4858  2002/04/25   21,000,000,000       0       0       1\n",
            "4859  2002/04/24   20,424,000,000       0       0       1\n",
            "4860  2002/04/23   18,240,000,000       0       0       1\n",
            "\n",
            "[4861 rows x 5 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 제대로 저장되었는지 테스트\n",
        "# with open('/content/drive/MyDrive/[Shared]K-Project/data/test1.json',\"r\") as json_file:\n",
        "#     json_data = json.load(json_file) # json file open\n",
        "\n",
        "df = pd.read_json(json_data['KR7060310000'], orient ='index') # 첫번째 키값으로 데이터프레임 변환\n",
        "json_df = df.transpose()\n",
        "print(json_df.columns)"
      ],
      "metadata": {
        "id": "-PqWqn_8xJHZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "de85af38-b42e-4e87-f5c9-56d9e1293c7d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['TRD_DD', 'ISU_CD', 'ISU_NM', 'TDD_CLSPRC', 'TDD_OPNPRC', 'TDD_HGPRC',\n",
            "       'TDD_LWPRC', 'MKTCAP', 'ACC_TRDVOL', 'EPS', 'PER', 'BPS', 'PBR', 'DPS',\n",
            "       'DVD_YLD'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# json 파일 합치는 방법\n",
        "# https://great-woman-hoseung.tistory.com/6"
      ],
      "metadata": {
        "id": "gjMBDiiZ1FnA"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
